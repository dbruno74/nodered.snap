name: node-red
adopt-info: node-red
summary: Low-code programming for event-driven applications
description: Node-RED is a flow based programming application for wiring together hardware devices, APIs and online services in new and interesting ways. For more information see http://nodered.org
confinement: strict
grade: stable
base: core22

architectures:
  - build-on: amd64
    build-for: amd64
  - build-on: [amd64, arm64]
    build-for: arm64
  - build-on: [amd64, armhf]
    build-for: armhf

apps:
  node-red:
    command: bin/startNR
    daemon: simple
    restart-condition: on-failure
    plugs:
      - audio-playback
      - bluez
      - bluetooth-control
      - camera
      - gpio
      - home
      - network-bind
      - network
      - network-observe
      - pulseaudio
      - removable-media
      - serial-port
      - snapd-control
  npm:
    command: bin/npm
    plugs:
      - home
      - network
  desktop-launch:
    command: bin/desktop-launch
    plugs:
      - desktop
  node:
    command: bin/node
    plugs:
      - audio-playback
      - bluez
      - bluetooth-control
      - camera
      - gpio
      - home
      - network-bind
      - network
      - network-observe
      - pulseaudio
      - removable-media
      - serial-port
      - snapd-control

parts:
  node: # We dump in a specific version of node/npm from upstream for staging/priming
    after: [node-red]
    plugin: dump
    source:
    # native
      - on amd64 to amd64: https://nodejs.org/dist/v18.12.1/node-v18.12.1-linux-x64.tar.gz
      - on armhf to armhf: https://nodejs.org/dist/v18.12.1/node-v18.12.1-linux-armv7l.tar.gz
      - on arm64 to arm64: https://nodejs.org/dist/v18.12.1/node-v18.12.1-linux-arm64.tar.gz
    # cross
      - on amd64 to armhf: https://nodejs.org/dist/v18.12.1/node-v18.12.1-linux-armv7l.tar.gz
      - on amd64 to arm64: https://nodejs.org/dist/v18.12.1/node-v18.12.1-linux-arm64.tar.gz
    override-build: |
      # cleaning PATH from INSTALL and STAGE directories
      export PATH=$(echo $PATH | sed -e 's,:*'$CRAFT_PART_INSTALL'[^:]*:*,,g')
      export PATH=$(echo $PATH | sed -e 's,:*'$CRAFT_STAGE'[^:]*:*,,g')
      echo $PATH

      cp --archive --link --no-dereference . $CRAFT_PART_INSTALL

  node.host: # We dump in a specific version of node/npm from upstream for building on host only. Note that it is not installed/staged
    plugin: dump
    source:
    # native
      - on amd64 to amd64: https://nodejs.org/dist/v18.12.1/node-v18.12.1-linux-x64.tar.gz
      - on armhf to armhf: https://nodejs.org/dist/v18.12.1/node-v18.12.1-linux-armv7l.tar.gz
      - on arm64 to arm64: https://nodejs.org/dist/v18.12.1/node-v18.12.1-linux-arm64.tar.gz
    # cross
      - on amd64 to armhf: https://nodejs.org/dist/v18.12.1/node-v18.12.1-linux-x64.tar.gz
      - on amd64 to arm64: https://nodejs.org/dist/v18.12.1/node-v18.12.1-linux-x64.tar.gz
    override-build: |
         # cleaning PATH from INSTALL and STAGE directories
         export PATH=$(echo $PATH | sed -e 's,:*'$CRAFT_PART_INSTALL'[^:]*:*,,g')
         export PATH=$(echo $PATH | sed -e 's,:*'$CRAFT_STAGE'[^:]*:*,,g')
         echo $PATH
         
         # install on host 
         cd $CRAFT_PART_SRC && find . -type d -exec mkdir -p "/{}" \;
         cd $CRAFT_PART_SRC && find . -type b,c,p,f,l,s -exec cp -P "{}" "/{}" \;
         export HOST_ARCH=$(uname -m)
         echo node/npm installed on $HOST_ARCH
         npm install --no-audit --no-fund --global @mapbox/node-pre-gyp
         echo module node-pre-gyp installed on $HOST_ARCH

  node-red:
    after: [node.host, prepare-env.host]
    plugin: nil
    source: .
    stage-packages:
    # native builds
      - on amd64 to amd64:
         - coreutils:amd64
         - python3:amd64
         - libatomic1:amd64
         - bluetooth:all
         - bluez:amd64
         - libbluetooth3:amd64
         - libbluetooth-dev:amd64
         - libssl3:amd64
         - libssl-dev:amd64
         - libudev1:amd64
         - libudev-dev:amd64
         - libusb-1.0-0:amd64
         - libusb-1.0-0-dev:amd64
         - curl:amd64
      - on arm64 to arm64:
         - coreutils:arm64
         - python3:arm64
         - libatomic1:arm64
         - bluetooth:all
         - bluez:arm64
         - libbluetooth3:arm64
         - libbluetooth-dev:arm64
         - libssl3:arm64
         - libssl-dev:arm64
         - libudev1:arm64
         - libudev-dev:arm64
         - libusb-1.0-0:arm64
         - libusb-1.0-0-dev:arm64
         - curl:arm64
      - on armhf to armhf:
         - coreutils:armhf
         - python3:armhf
         - libatomic1:armhf
         - bluetooth:all
         - bluez:armhf
         - libbluetooth3:armhf
         - libbluetooth-dev:armhf
         - libssl3:armhf
         - libssl-dev:armhf
         - libudev1:armhf
         - libudev-dev:armhf
         - libusb-1.0-0:armhf
         - libusb-1.0-0-dev:armhf
         - curl:armhf
   # cross builds
      - on amd64 to arm64:
         - coreutils:arm64
         - python3:arm64
         - libatomic1:arm64
         - bluez:arm64
         - libbluetooth3:arm64
         - libbluetooth-dev:arm64
         - libssl3:arm64
         - libssl-dev:arm64
         - libudev1:arm64
         - libudev-dev:arm64
         - libusb-1.0-0:arm64
         - libusb-1.0-0-dev:arm64
         - curl:arm64
      - on amd64 to armhf:
         - coreutils:armhf
         - python3:armhf
         - libatomic1:armhf
         - bluez:armhf
         - libbluetooth3:armhf
         - libbluetooth-dev:armhf
         - libssl3:armhf
         - libssl-dev:armhf
         - libudev1:armhf
         - libudev-dev:armhf
         - libusb-1.0-0:armhf
         - libusb-1.0-0-dev:armhf
         - curl:armhf
    build-packages:
    # native builds
      - on amd64 to amd64:
          - sudo
      - on arm64 to arm64:
          - sudo
      - on amdhf to amdhf:
          - sudo
    # cross builds
      - on amd64 to arm64:
          - crossbuild-essential-arm64
          - sudo
      - on amd64 to armhf:
          - crossbuild-essential-armhf
          - sudo
    override-build: | 
      set +u
      # cleaning PATH from INSTALL and STAGE directories
      export PATH=$(echo $PATH | sed -e 's,:*'$CRAFT_PART_INSTALL'[^:]*:*,,g')
      export PATH=$(echo $PATH | sed -e 's,:*'$CRAFT_STAGE'[^:]*:*,,g')
      echo $PATH
      
      npm config set unsafe-perm true

      # compile and install bluetooth-hci-socket module
      npm install --no-audit --no-fund --prefix $CRAFT_PART_INSTALL/lib --ignore-scripts @abandonware/bluetooth-hci-socket
      if [ -z "$CRAFT_ARCH_TRIPLET" ]; then
         echo CRAFT_ARCH_TRIPLET not set! 
         exit 1
      else
         export AR=$(which $CRAFT_ARCH_TRIPLET\-ar)
         export CC=$(which $CRAFT_ARCH_TRIPLET\-gcc)
         export CXX=$(which $CRAFT_ARCH_TRIPLET\-g++)
         export LINK=$(which $CRAFT_ARCH_TRIPLET\-g++)
         export LDFLAGS=-L/usr/$CRAFT_ARCH_TRIPLET/lib
      fi

      if [ -z "$AR" ] || [ -z "$CC" ] || [ -z "$CXX" ] || [ -z "$LINK" ]; then
         echo "Compiler needed! Please add the package build-essential (for native compilation) or crossbuild-essential-xxx (for cross compilation, replace xxx with your arch, e.g. arm64, armhf, etc.) to build-packages!"
         exit 1
      fi

      cd $CRAFT_PART_INSTALL/lib/node_modules/@abandonware/bluetooth-hci-socket && /lib/node_modules/@mapbox/node-pre-gyp/bin/node-pre-gyp install --fallback-to-build --target_arch=$CRAFT_TARGET_ARCH

      # install global modules
      npm install --no-audit --no-fund --prefix $CRAFT_PART_INSTALL/lib utf8 uuid node-red node-red-node-ping node-red-node-random node-red-node-serialport node-red-node-data-generator node-red-dashboard node-red-contrib-ui-multistate-switch node-red-node-ui-table node-red-contrib-ui-media node-red-contrib-tableify node-red-contrib-ui-led node-red-contrib-controltimer @dbruno74/node-red-node-sensortag @dbruno74/node-red-node-snapd

      # some cleaning ...
      find $CRAFT_PART_INSTALL -type f -name '*.js.swp' -delete
      find $CRAFT_PART_INSTALL/lib/node_modules -type d -name test -prune -exec rm -rf {} \;
      find $CRAFT_PART_INSTALL/lib/node_modules -type d -name doc -prune -exec rm -rf {} \;
      find $CRAFT_PART_INSTALL/lib/node_modules -type d -name example -prune -exec rm -rf {} \;
      find $CRAFT_PART_INSTALL/lib/node_modules -type d -name sample -prune -exec rm -rf {} \;
      find $CRAFT_PART_INSTALL/lib/node_modules -type d -iname benchmark* -prune -exec rm -rf {} \;
      find $CRAFT_PART_INSTALL/lib/node_modules -type d -iname .nyc_output -prune -exec rm -rf {} \;
      find $CRAFT_PART_INSTALL/lib/node_modules -type d -iname unpacked -prune -exec rm -rf {} \;
      find $CRAFT_PART_INSTALL/lib/node_modules -type d -name man* -prune -exec rm -rf {} \;
      find $CRAFT_PART_INSTALL/lib/node_modules -type d -name tst -prune -exec rm -rf {} \;
      find $CRAFT_PART_INSTALL/lib/node_modules -type d -iname demo -prune -exec rm -rf {} \;
      find $CRAFT_PART_INSTALL/lib/node_modules -type f -name bench.gnu -exec rm -f {} \;
      find $CRAFT_PART_INSTALL/lib/node_modules -type f -name .npmignore -exec rm -f {} \;
      find $CRAFT_PART_INSTALL/lib/node_modules -type f -name .travis.yml -exec rm -f {} \;
      find $CRAFT_PART_INSTALL/lib/node_modules -type f -name .jshintrc -exec rm -f {} \;
      find $CRAFT_PART_INSTALL/lib/node_modules -type f -iname README.md -exec rm -f {} \;
      find $CRAFT_PART_INSTALL/lib/node_modules -type f -iname HISTORY.md -exec rm -f {} \;
      find $CRAFT_PART_INSTALL/lib/node_modules -type f -iname CONTRIBUTING.md -exec rm -f {} \;
      find $CRAFT_PART_INSTALL/lib/node_modules -type f -iname CHANGE*.md -exec rm -f {} \;
      find $CRAFT_PART_INSTALL/lib/node_modules -type f -iname .gitmodules -exec rm -f {} \;
      find $CRAFT_PART_INSTALL/lib/node_modules -type f -iname .gitattributes -exec rm -f {} \;
      find $CRAFT_PART_INSTALL/lib/node_modules -type f -iname .gitignore -exec rm -f {} \;
      find $CRAFT_PART_INSTALL/lib/node_modules -type f -iname "*~" -exec rm -f {} \;

      # setting snap version
      VER=$(npm show node-red version)
      echo "VERSION $(npm show node-red version)"
      craftctl set version=$VER

  settings:
    plugin: dump
    after: [prepare-env.host, node, node-red]
    source: snap/local/settings 
    organize:
      start.sh: "bin/startNR"
      desktop-launch: "bin/desktop-launch"
    override-build: |
      # cleaning PATH from INSTALL and STAGE directories
      export PATH=$(echo $PATH | sed -e 's,:*'$CRAFT_PART_INSTALL'[^:]*:*,,g')
      export PATH=$(echo $PATH | sed -e 's,:*'$CRAFT_STAGE'[^:]*:*,,g')
      echo $PATH

      cp --archive --link --no-dereference . $CRAFT_PART_INSTALL

  config:
    source: .
    after: [prepare-env.host, node, node-red]
    plugin: nil
    override-build: |
      # cleaning PATH from INSTALL and STAGE directories
      export PATH=$(echo $PATH | sed -e 's,:*'$CRAFT_PART_INSTALL'[^:]*:*,,g')
      export PATH=$(echo $PATH | sed -e 's,:*'$CRAFT_STAGE'[^:]*:*,,g')
      echo $PATH

      cp -r config $CRAFT_PART_INSTALL/

  prepare-env.host:
    plugin: nil
    build-packages: [software-properties-common, coreutils]
    override-pull: |
      case $CRAFT_TARGET_ARCH in
         arm64)
            export HOST_ARCH=$(uname -m)
            if [ "$HOST_ARCH" = "x86_64" ]; then
               echo "Preparing build environment for cross-build on host: $HOST_ARCH, target: $CRAFT_TARGET_ARCH"
               add-apt-repository "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy main restricted"
               add-apt-repository "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates main restricted"
               add-apt-repository "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy universe"
               add-apt-repository "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates universe"
               add-apt-repository "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy multiverse"
               add-apt-repository "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates multiverse"
               add-apt-repository "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-backports main restricted universe multiverse"
               add-apt-repository "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-security main restricted"
               add-apt-repository "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-security universe"
               add-apt-repository "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-security multiverse"
            fi
            ;;
         armhf)
            export HOST_ARCH=$(uname -m)
            if [ "$HOST_ARCH" = "x86_64" ]; then
               echo "Preparing build environment for cross-build on host: $HOST_ARCH, target: $CRAFT_TARGET_ARCH"
               add-apt-repository "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports jammy main restricted"
               add-apt-repository "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports jammy-updates main restricted"
               add-apt-repository "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports jammy universe"
               add-apt-repository "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports jammy-updates universe"
               add-apt-repository "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports jammy multiverse"
               add-apt-repository "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports jammy-updates multiverse"
               add-apt-repository "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports jammy-backports main restricted universe multiverse"
               add-apt-repository "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports jammy-security main restricted"
               add-apt-repository "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports jammy-security universe"
               add-apt-repository "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports jammy-security multiverse"
            fi
            ;;
      esac
 
plugs:
  writable:
    interface: content
    content: writable-data
    target: $SNAP_DATA/grafana



