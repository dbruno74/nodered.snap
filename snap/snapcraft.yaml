name: node-red
adopt-info: node-red
summary: Low-code programming for event-driven applications
description: Node-RED is a flow based programming application for wiring together hardware devices, APIs and online services in new and interesting ways. For more information see http://nodered.org
confinement: strict
grade: stable
base: core22

# Limit architectures as ppcel64 doesn't build currently
architectures:
  - build-on: amd64
  - build-on: armhf
  - build-on: arm64
  - build-on: s390x

apps:
  node-red:
    command: bin/startNR
    daemon: simple
    restart-condition: on-failure
    plugs:
      - audio-playback
      - bluez
      - bluetooth-control
      - camera
      - gpio
      - home
      - network-bind
      - network
      - network-observe
      - pulseaudio
      - removable-media
      - serial-port
      - snapd-control
  npm:
    command: bin/npm
    plugs:
      - home
      - network
  desktop-launch:
    command: bin/desktop-launch
    plugs:
      - desktop
  node:
    command: bin/node
    plugs:
      - audio-playback
      - bluez
      - bluetooth-control
      - camera
      - gpio
      - home
      - network-bind
      - network
      - network-observe
      - pulseaudio
      - removable-media
      - serial-port
      - snapd-control

parts:
  node: # We dump in a specific version of node/npm from upstream.
    plugin: dump
    source:
      - on amd64: https://nodejs.org/dist/v14.19.3/node-v14.19.3-linux-x64.tar.gz
      - on armhf: https://nodejs.org/dist/v14.19.3/node-v14.19.3-linux-armv7l.tar.gz
      - on arm64: https://nodejs.org/dist/v14.19.3/node-v14.19.3-linux-arm64.tar.gz
      - on s390x: https://nodejs.org/dist/v14.19.3/node-v14.19.3-linux-s390x.tar.gz
  node-red:
    after: [node]
    plugin: nil # We use the nil plugin so we can fully override the build with whatever we need to do
    source: .
    stage-packages:
      - coreutils
      - python3
      - libatomic1
      - bluetooth
      - bluez
      - libbluetooth3
      - libbluetooth-dev
      - libssl3
      - libssl-dev
      - libudev1
      - libudev-dev
      - libusb-1.0-0
      - libusb-1.0-0-dev

    build-packages:
      - build-essential
    override-build: | # Whatever steps needed to install node-red into the install folder, which gets incorporated into the snap
      PATH=$PATH:../npm/bin
      apt-get install libatomic1
      npm config set unsafe-perm true
      # npm install --prefix $SNAPCRAFT_PART_INSTALL/lib
      npm install --no-audit --no-fund --prefix $SNAPCRAFT_PART_INSTALL/lib utf8 uuid node-red node-red-node-ping node-red-node-random node-red-node-serialport node-red-node-data-generator node-red-dashboard node-red-contrib-ui-multistate-switch node-red-node-ui-table node-red-contrib-ui-media node-red-contrib-tableify node-red-contrib-ui-led node-red-contrib-controltimer @dbruno74/node-red-node-sensortag @dbruno74/node-red-node-snapd
      find $SNAPCRAFT_PART_INSTALL -type f -name '*.js.swp' -delete
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type d -name test -prune -exec rm -rf {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type d -name doc -prune -exec rm -rf {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type d -name example -prune -exec rm -rf {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type d -name sample -prune -exec rm -rf {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type d -iname benchmark* -prune -exec rm -rf {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type d -iname .nyc_output -prune -exec rm -rf {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type d -iname unpacked -prune -exec rm -rf {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type d -name man* -prune -exec rm -rf {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type d -name tst -prune -exec rm -rf {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type d -iname demo -prune -exec rm -rf {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -name bench.gnu -exec rm -f {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -name .npmignore -exec rm -f {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -name .travis.yml -exec rm -f {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -name .jshintrc -exec rm -f {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -iname README.md -exec rm -f {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -iname HISTORY.md -exec rm -f {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -iname CONTRIBUTING.md -exec rm -f {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -iname CHANGE*.md -exec rm -f {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -iname .gitmodules -exec rm -f {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -iname .gitattributes -exec rm -f {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -iname .gitignore -exec rm -f {} \;
      find $SNAPCRAFT_PART_INSTALL/lib/node_modules -type f -iname "*~" -exec rm -f {} \;
      VER=$(npm show node-red version)
      echo "VERSION $(npm show node-red version)"
      snapcraftctl set-version $VER
  settings:
    plugin: dump
    source: snap/local/settings # snapcraft now prefers local parts to be in snap/local
    organize:
      start.sh: "bin/startNR"
      desktop-launch: "bin/desktop-launch"

  config:
    source: .
    plugin: nil
    override-build: |
      cp -r config $SNAPCRAFT_PART_INSTALL/
